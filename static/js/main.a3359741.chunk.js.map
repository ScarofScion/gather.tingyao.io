{"version":3,"sources":["App.js","components/Counter.js","components/Header.js","serviceWorker.js","index.js"],"names":["shoBtn","Counter","props","react_default","a","createElement","className","onClick","handleGuest","guests","PageHeader","src","alt","firebase","apps","length","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","db","firestore","settings","timestampsInSnapshots","App","state","guestcount","showForm","isComing","isConfirmed","guestname","handleGuestCountChange","delta","_this","setState","prevState","console","log","this","collection","doc","set","then","catch","error","Button","handleClick","bind","bsStyle","ButtonGroup","justified","href","handleGoing","handleNotGoing","components_Counter","handleSave","handleCancel","Header","Jumbotron","Col","sm","md","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a3359741.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport {\n  Grid,\n  Row,\n  Col,\n  Clearfix,\n  Alert,\n  Badge,\n  Button,\n  Jumbotron,\n  FormGroup,\n  ButtonGroup,\n  ButtonToolbar,\n  DropdownButton,\n  MenuItem,\n  PageHeader\n} from \"react-bootstrap\";\nimport \"./App.css\";\nimport Counter from \"./components/Counter\";\nimport Header from \"./components/Header\";\nlet shoBtn;\n\nif (!firebase.apps.length) {\n  firebase.initializeApp({\n    apiKey: \"AIzaSyAxqRtkFndnlPNMy-XgYPj4dr0-t1jRP5U\",\n    authDomain: \"gather-182d9.firebaseapp.com\",\n    databaseURL: \"https://gather-182d9.firebaseio.com\",\n    projectId: \"gather-182d9\",\n    storageBucket: \"gather-182d9.appspot.com\",\n    messagingSenderId: \"620153026922\"\n  });\n}\n\nconst db = firebase.firestore();\ndb.settings({ timestampsInSnapshots: true });\n\nclass App extends Component {\n  state = {\n    guestcount: 0,\n    showForm: false,\n    isComing: false,\n    isConfirmed: false,\n    guestname: \"biguncle-william\"\n  };\n\n  handleClick() {\n    console.log(\"click\");\n    this.setState({ showForm: true });\n  }\n\n  handleCancel() {\n    this.setState({ showForm: false });\n  }\n\n  handleSave() {\n    this.setState({ isConfirmed: true });\n    db.collection(\"guestlist\")\n      .doc(\"biguncle-william\")\n      .set({\n        guestcount: this.state.guestcount,\n        isComing: this.state.isComing,\n        isConfirmed: this.state.isConfirmed\n      })\n      .then(function() {\n        console.log(\"Document successfully written!\");\n      })\n      .catch(function(error) {\n        console.error(\"Error writing document: \", error);\n      });\n    this.setState({ showForm: false });\n  }\n\n  handleGuestCountChange = delta => {\n    this.setState(prevState => ({\n      guestcount: (prevState.guestcount += delta)\n    }));\n  };\n\n  handleGoing() {\n    this.setState(prevState => ({\n      isComing: (prevState.isComing = true)\n    }));\n  }\n\n  handleNotGoing() {\n    this.setState(prevState => ({\n      isComing: (prevState.isComing = false)\n    }));\n    console.log(this.state.isComing);\n  }\n\n  render() {\n    if (!this.state.showForm) {\n      shoBtn = (\n        <Button onClick={this.handleClick.bind(this)} bsStyle=\"primary\">\n          RSVP\n        </Button>\n      );\n    }\n    if (this.state.showForm) {\n      shoBtn = (\n        <div>\n          <ButtonGroup justified>\n            <Button href=\"#\" onClick={this.handleGoing.bind(this)}>\n              Going\n            </Button>\n            <Button href=\"#\" onClick={this.handleNotGoing.bind(this)}>\n              Not Going\n            </Button>\n          </ButtonGroup>\n          <br />\n          <br />\n          <br />\n          <Counter\n            guests={this.state.guestcount}\n            handleGuest={this.handleGuestCountChange}\n          />\n          <br />\n          <br />\n          <br />\n          <Button bsStyle=\"primary\" onClick={this.handleSave.bind(this)}>\n            Save\n          </Button>\n          <Button bsStyle=\"primary\" onClick={this.handleCancel.bind(this)}>\n            Cancel\n          </Button>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <Header />\n        {shoBtn}\n        <Jumbotron>\n          <Col sm={6} md={3}>\n            DATE: Saturday, Febuarary 2nd, 2018 (ADD TO CALENDAR) <br />\n          </Col>\n          <Col sm={6} md={3}>\n            ADDRESS: Caesars Hotel (GET DIRECTIONS) <br />\n          </Col>\n          <Col sm={6} md={3}>\n            HOST: Jasmine and William (949)-829-1403 (SEND A MESSAGE) <br />\n          </Col>\n        </Jumbotron>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\r\n\r\nconst Counter = props => {\r\n  return (\r\n    <div className=\"counter\">\r\n      <button\r\n        className=\"counter-action decrement\"\r\n        onClick={() => props.handleGuest(-1)}\r\n      >\r\n        {\" \"}\r\n        -{\" \"}\r\n      </button>\r\n      <span className=\"counter-score\">Number of Guests: {props.guests}</span>\r\n      <button\r\n        className=\"counter-action increment\"\r\n        onClick={() => props.handleGuest(1)}\r\n      >\r\n        {\" \"}\r\n        +{\" \"}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Counter;\r\n","import React from \"react\";\r\nimport { PageHeader } from \"react-bootstrap\";\r\n\r\nconst Counter = props => {\r\n  return (\r\n    <div>\r\n      <PageHeader className=\"App-header\">\r\n        <h3>SAVE THE DATE</h3>\r\n        <p>To: Ben, Rita, and Austin Ma</p>\r\n        <br />\r\n        <img\r\n          src=\"https://i.imgur.com/SA2aUrz.jpg\"\r\n          className=\"App-logo\"\r\n          alt=\"logo\"\r\n        />\r\n      </PageHeader>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Counter;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}